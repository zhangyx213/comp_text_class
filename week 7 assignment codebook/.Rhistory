library(readr)
article_df <- read_csv("article_df.csv")
View(article_df)
#example of u.s. articles
library(dplyr)
library(stringr)
library(readr)
article_df <- read_csv("article_df.csv")
View(article_df)
View(article_df)
# Step 1: Count keyword frequencies for each sentence in the article_df.
article_df <- article_df %>%
mutate(
freq_medical = str_count(sentence, regex("procedure|safe|medical|health|recovery", ignore_case = TRUE)),
freq_decision = str_count(sentence, regex("decision|choice|family planning|responsibility|gender equality|contraceptive", ignore_case = TRUE)),
freq_policy   = str_count(sentence, regex("roe v\\. wade|supreme court|birth rate|population policy|abortion|political|policy", ignore_case = TRUE))
)
# Step 2: Aggregate counts for each article using filename.
article_summary <- article_df %>%
group_by(filename) %>%
summarise(
total_medical = sum(freq_medical, na.rm = TRUE),
total_decision = sum(freq_decision, na.rm = TRUE),
total_policy   = sum(freq_policy, na.rm = TRUE)
)
# Step 3: Classify each article based on which keyword frequency is highest.
article_summary <- article_summary %>%
mutate(
issue_type = case_when(
total_medical >= total_decision & total_medical >= total_policy & total_medical > 0 ~ "Medical Issues",
total_decision >= total_medical & total_decision >= total_policy & total_decision > 0 ~ "Contraceptive Decision-Making",
total_policy >= total_medical & total_policy >= total_decision & total_policy > 0 ~ "Political/Policy Context",
TRUE ~ "Other"
)
)
# Check the results
head(article_summary)
library(tidytext)
# Tokenize the sentences into words
article_tokens <- article_df %>%
unnest_tokens(word, sentence)
# Join tokens with the AFINN lexicon and compute sentiment scores for each word
afinn <- get_sentiments("afinn")
article_sentiment <- article_tokens %>%
inner_join(afinn, by = "word") %>%
# Aggregate sentiment scores by article
group_by(filename) %>%
summarise(sentiment_score = sum(value, na.rm = TRUE)) %>%
ungroup() %>%
# Classify the overall article sentiment
mutate(sentiment_category = case_when(
sentiment_score > 0 ~ "Positive",
sentiment_score < 0 ~ "Negative",
TRUE ~ "Neutral"
))
# Optional: View the resulting aggregated data frame
head(article_sentiment)
article_policy_mentions <- article_df %>%
mutate(roe_mentions = str_count(sentence, regex("roe v\\. wade", ignore_case = TRUE))) %>%
group_by(filename) %>%
summarise(total_roe_mentions = sum(roe_mentions, na.rm = TRUE)) %>%
ungroup() %>%
mutate(policy_classification = case_when(
total_roe_mentions > 0 ~ "Roe Mentioned",
TRUE ~ "Not Mentioned"
))
head(article_policy_mentions)
#example of u.s. articles
library(dplyr)
library(stringr)
library(readr)
article_df <- read_csv("article_df.csv")
View(article_df)
#Count keyword frequencies for each sentence
article_df <- article_df %>%
mutate(
freq_medical = str_count(sentence, regex("procedure|safe|medical|health|recovery", ignore_case = TRUE)),
freq_decision = str_count(sentence, regex("decision|choice|family planning|responsibility|gender equality|contraceptive", ignore_case = TRUE)),
freq_policy   = str_count(sentence, regex("roe v\\. wade|supreme court|birth rate|population policy|abortion|political|policy", ignore_case = TRUE))
)
#Aggregate counts for each article using filename.
article_summary <- article_df %>%
group_by(filename) %>%
summarise(
total_medical = sum(freq_medical, na.rm = TRUE),
total_decision = sum(freq_decision, na.rm = TRUE),
total_policy   = sum(freq_policy, na.rm = TRUE)
)
#Classify each article based on which keyword frequency is highest.
article_summary <- article_summary %>%
mutate(
issue_type = case_when(
total_medical >= total_decision & total_medical >= total_policy & total_medical > 0 ~ "Medical Issues",
total_decision >= total_medical & total_decision >= total_policy & total_decision > 0 ~ "Contraceptive Decision-Making",
total_policy >= total_medical & total_policy >= total_decision & total_policy > 0 ~ "Political/Policy Context",
TRUE ~ "Other"
)
)
head(article_summary)
View(article_summary)
article_summary %>%
count(word, sort=TRUE)
word_ct = article_summary %>%
count(word, sort=TRUE)
article_summary %>%
count(issue_type, sort=TRUE)
count = article_summary %>%
count(issue_type, sort=TRUE)
count
View(count)
article_policy_mentions <- article_df %>%
mutate(roe_mentions = str_count(sentence, regex("roe v\\. wade", ignore_case = TRUE))) %>%
group_by(filename) %>%
summarise(total_roe_mentions = sum(roe_mentions, na.rm = TRUE)) %>%
ungroup() %>%
mutate(policy_classification = case_when(
total_roe_mentions > 0 ~ "Roe Mentioned",
TRUE ~ "Not Mentioned"
))
head(article_policy_mentions)
count2 = article_policy_mentions %>%
count(total_roe_mentions,sort=TRUE)
count2
View(article_policy_mentions)
library(tidytext)
# Tokenize the sentences into words
article_tokens <- article_df %>%
unnest_tokens(word, sentence)
# Join tokens with the AFINN lexicon and compute sentiment scores for each word
afinn <- get_sentiments("afinn")
article_sentiment <- article_tokens %>%
inner_join(afinn, by = "word") %>%
# Aggregate sentiment scores by article
group_by(filename) %>%
summarise(sentiment_score = sum(value, na.rm = TRUE)) %>%
ungroup() %>%
# Classify the overall article sentiment
mutate(sentiment_category = case_when(
sentiment_score > 0 ~ "Positive",
sentiment_score < 0 ~ "Negative",
TRUE ~ "Neutral"
))
head(article_sentiment)
View(afinn)
View(article_sentiment)
library(tidytext)
get_sentiments("afinn")
library(tidytext)
load("../data/afinn.rda")
get_sentiments("bing")
get_sentiments("nrc")
load("../data/nrc.rda")
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
library(tidyr)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
library(ggplot2)
ggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
pride_prejudice
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment,
values_from = n,
values_fill = 0) %>%
mutate(sentiment = positive - negative)
bind_rows(afinn,
bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
get_sentiments("nrc") %>%
filter(sentiment %in% c("positive", "negative")) %>%
count(sentiment)
nrc %>%
filter(sentiment %in% c("positive", "negative")) %>%
count(sentiment)
get_sentiments("bing") %>%
count(sentiment)
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts
bing_word_counts %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
library(wordcloud)
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
library(reshape2)
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
p_and_p_sentences <- tibble(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences")
p_and_p_sentences$sentence[2]
austen_chapters <- austen_books() %>%
group_by(book) %>%
unnest_tokens(chapter, text, token = "regex",
pattern = "Chapter|CHAPTER [\\dIVXLC]") %>%
ungroup()
austen_chapters %>%
group_by(book) %>%
summarise(chapters = n())
bingnegative <- get_sentiments("bing") %>%
filter(sentiment == "negative")
wordcounts <- tidy_books %>%
group_by(book, chapter) %>%
summarize(words = n())
tidy_books %>%
semi_join(bingnegative) %>%
group_by(book, chapter) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = c("book", "chapter")) %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
slice_max(ratio, n = 1) %>%
ungroup()
ggplot(article_sentiment, aes(x = index, y = sentiment_score, fill = sentiment_category)) +
geom_col(position = "dodge", stat = "identity") +
scale_fill_manual(values = c("Positive" = "darkgreen", "Negative" = "red")) +
labs(title = "Sentiment of Daily Wire coverage of Kamala Harris, October 2024",
caption = "n=96 articles. Afinn sentiment. Graphic by Rob Wells 1-25-2025",
x = "Articles",
y = "Sentiment Score")
ggplot(article_sentiment, aes(x = filename, y = sentiment_score, fill = sentiment_category)) +
geom_col(position = "dodge", stat = "identity") +
scale_fill_manual(values = c("Positive" = "darkgreen", "Negative" = "red")) +
labs(title = "Sentiment of Daily Wire coverage of Kamala Harris, October 2024",
caption = "n=96 articles. Afinn sentiment. Graphic by Rob Wells 1-25-2025",
x = "Articles",
y = "Sentiment Score")
ggplot(article_sentiment, aes(x = filename, y = sentiment_score, fill = sentiment_category)) +
geom_col(position = "dodge", stat = "identity") +
scale_fill_manual(values = c("Positive" = "darkgreen", "Negative" = "red")) +
labs(title = "Sentiment of Vasectomy Reporting After Roe v. Wade",
caption = "n=100 articles. Afinn sentiment. Graphic by Catherine Zhang, 2025",
x = "Articles",
y = "Sentiment Score")
#load tidyverse, tidytext, rio and quanteda libraries
#install.packages("quanteda")
library(tidyverse)
library(tidytext)
library(quanteda)
View(article_policy_mentions)
View(count)
View(count2)
