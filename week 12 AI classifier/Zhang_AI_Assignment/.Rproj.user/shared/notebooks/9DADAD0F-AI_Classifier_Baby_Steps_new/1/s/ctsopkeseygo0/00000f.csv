"0","process_llm_response_to_df <- function(response) {"
"0","  # Extract lines"
"0","  lines <- strsplit(response, ""\n"")[[1]]"
"0","  "
"0","  # Remove markdown code block markers if present"
"0","  lines <- lines[!grepl(""^```"", lines)]"
"0","  "
"0","  # Initialize vectors for data"
"0","  filenames <- c()"
"0","  categories <- c()"
"0","  explanations <- c()"
"0","  "
"0","  # Flag to track if we're processing data (after header)"
"0","  header_found <- FALSE"
"0","  "
"0","  for (line in lines) {"
"0","    # Skip empty lines"
"0","    if (trimws(line) == """") next"
"0","    "
"0","    # Skip row numbers or other artifacts (lines with asterisks)"
"0","    if (grepl(""\\*\\*"", line)) next"
"0","    "
"0","    # Check if this is the header line"
"0","    if (grepl(""filename.*category.*explanation"", line, ignore.case = TRUE)) {"
"0","      header_found <- TRUE"
"0","      next"
"0","    }"
"0","    "
"0","    # Process data lines (only after header is found)"
"0","    if (header_found || grep(""batch.*\\.txt"", line)) {"
"0","      # Parse each row with better handling of commas within explanations"
"0","      parts <- strsplit(line, "",\\s*"", perl = TRUE, fixed = FALSE)[[1]]"
"0","      "
"0","      if (length(parts) >= 1) {"
"0","        filename <- parts[1]"
"0","        category <- ifelse(length(parts) >= 2, parts[2], """")"
"0","        "
"0","        # Handle the explanation (everything after second comma)"
"0","        if (length(parts) >= 3) {"
"0","          explanation <- paste(parts[3:length(parts)], collapse = "", "")"
"0","        } else {"
"0","          explanation <- NA"
"0","        }"
"0","        "
"0","        filenames <- c(filenames, filename)"
"0","        categories <- c(categories, category)"
"0","        explanations <- c(explanations, explanation)"
"0","      }"
"0","    }"
"0","  }"
"0","  "
"0","  # Create and return the dataframe"
"0","  if (length(filenames) > 0) {"
"0","    data.frame("
"0","      filename = filenames,"
"0","      category = categories,"
"0","      explanation = explanations,"
"0","      stringsAsFactors = FALSE"
"0","    )"
"0","  } else {"
"0","    # Return empty dataframe with correct structure if no data found"
"0","    data.frame("
"0","      filename = character(0),"
"0","      category = character(0),"
"0","      explanation = character(0),"
"0","      stringsAsFactors = FALSE"
"0","    )"
"0","  }"
"0","}"
"0","result_df2 <- process_llm_response_to_df(response)"
