###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
setwd("D:/comp_text_class/project/dataset/nexis uni")
lapply(row_values, create_article_text)
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
file_path <- paste0("D:/comp_text_class/project/dataset/major_pubs_raw_text/", row$file_name, ".txt")
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
create_article_text <- function(row_value) {
# 根据传入的行号取出数据
temp <- final_index %>%
slice(row_value)
# 存储文件名
temp_filename <- temp$filename
# 使用已提供的filepath (确保final_index中有这一列)
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# 合并结果到全局数据框
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
# 创建结果保存的数据框
articles_df <- tibble()
# 创建索引
row_values <- 1:nrow(final_index)
# 运行函数
lapply(row_values, create_article_text)
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
file_path <- paste0("D:/comp_text_class/project/dataset/major_pubs_raw_text/", temp$file_name, ".txt")
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
file_path <- paste0("D:/comp_text_class/project/dataset/major_pubs_raw_text/", temp$file_name, ".txt")
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
setwd('D:/comp_text_class/project/dataset/nexis uni')
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
file_path <- paste0("D:/comp_text_class/project/dataset/major_pubs_raw_text/", temp$file_name, ".txt")
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
file_path <- paste0("D:/comp_text_class/project/dataset/us_files1038_raw_text/", temp$file_name, ".txt")
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
file_path <- paste0("D:/comp_text_class/project/dataset/nexis uni/us_files1038_raw_text/", temp$file_name, ".txt")
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
###
# Define function to loop through each text file
###
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
file_path <- paste0("D:/comp_text_class/project/dataset/nexis uni/us_files1038_raw_text/", temp$file_name, ".txt")
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(file_path) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
library(tidyverse)
library(janitor)
library(striprtf)
setwd('D:/comp_text_class/project/dataset/nexis uni')
#This creates an index with the file path to the stories. And then it compiles the stories into a dataframe
#####################
# Begin SM Code #####
#####################
###
# List out text files that match pattern .txt, create DF
###
#Adjust thisline for your file name
files <- list.files("./us_files1038_raw_text", pattern="*.txt") %>%
as.data.frame() |>
rename(filename = 1) |>
#create an matching file name
mutate(index = str_replace_all(filename, ".txt", "")) %>%
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", index))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25)) |>
distinct(index, .keep_all = TRUE)
#Join the file list to the index
final_data <- rio::import("Results list us.XLSX") |>
clean_names() |>
#create an matching file name
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", title))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25)) |>
distinct(index, .keep_all = TRUE)
final_data |>
count(title) |>
arrange(desc(n))
dupe_data <- rio::import("Results list us.XLSX") |>
clean_names() |>
#create an matching file name
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", title))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25))
dupe_data |>
count(title) |>
arrange(desc(n))
final_index <- final_data |>
inner_join(files, c("index")) |>
#you need the actual hard-coded path on this line below to the text
mutate(filepath = paste0("./major_pubs_raw_text/", filename))
head(final_index)
anti_final_index <- final_data |>
anti_join(files, c("index"))
final_index |>
count(title) |>
arrange(desc(n))
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
#running once to test
#create_article_text(2)
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
library(tidyverse)
library(janitor)
library(striprtf)
setwd('D:/comp_text_class/project/dataset/nexis uni')
final_data |>
count(title) |>
arrange(desc(n))
#This creates an index with the file path to the stories. And then it compiles the stories into a dataframe
#####################
# Begin SM Code #####
#####################
###
# List out text files that match pattern .txt, create DF
###
#Adjust thisline for your file name
files <- list.files("./us_files1038_raw_text", pattern="*.txt") %>%
as.data.frame() |>
rename(filename = 1) |>
#create an matching file name
mutate(index = str_replace_all(filename, ".txt", "")) %>%
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", index))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25)) |>
distinct(index, .keep_all = TRUE)
#Join the file list to the index
final_data <- rio::import("Results list us.XLSX") |>
clean_names() |>
#create an matching file name
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", title))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25)) |>
distinct(index, .keep_all = TRUE)
final_data |>
count(title) |>
arrange(desc(n))
dupe_data <- rio::import("Results list us.XLSX") |>
clean_names() |>
#create an matching file name
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", title))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25))
dupe_data |>
count(title) |>
arrange(desc(n))
final_index <- final_data |>
inner_join(files, c("index")) |>
#you need the actual hard-coded path on this line below to the text
mutate(filepath = paste0("./major_pubs_raw_text/", filename))
head(final_index)
anti_final_index <- final_data |>
anti_join(files, c("index"))
final_index |>
count(title) |>
arrange(desc(n))
final_index <- final_data |>
inner_join(files, c("index")) |>
#you need the actual hard-coded path on this line below to the text
mutate(filepath = paste0("./us_files1038_raw_text/", filename))
head(final_index)
#This creates an index with the file path to the stories. And then it compiles the stories into a dataframe
#####################
# Begin SM Code #####
#####################
###
# List out text files that match pattern .txt, create DF
###
#Adjust thisline for your file name
files <- list.files("./us_files1038_raw_text", pattern="*.txt") %>%
as.data.frame() |>
rename(filename = 1) |>
#create an matching file name
mutate(index = str_replace_all(filename, ".txt", "")) %>%
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", index))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25)) |>
distinct(index, .keep_all = TRUE)
#Join the file list to the index
final_data <- rio::import("Results list us.XLSX") |>
clean_names() |>
#create an matching file name
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", title))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25)) |>
distinct(index, .keep_all = TRUE)
final_data |>
count(title) |>
arrange(desc(n))
dupe_data <- rio::import("Results list us.XLSX") |>
clean_names() |>
#create an matching file name
mutate(index = tolower(gsub("[[:punct:][:space:]|]", "", title))) |>
mutate(index = tolower(index)) |>
mutate(index = str_sub(index, 1, 25))
dupe_data |>
count(title) |>
arrange(desc(n))
final_index <- final_data |>
inner_join(files, c("index")) |>
#you need the actual hard-coded path on this line below to the text
mutate(filepath = paste0("./us_files1038_raw_text/", filename))
head(final_index)
anti_final_index <- final_data |>
anti_join(files, c("index"))
final_index |>
count(title) |>
arrange(desc(n))
create_article_text <- function(row_value) {
#row_value is the single argument that is passed to the function
# Take each row of the dataframe
temp <- final_index %>%
slice(row_value)
# Store the filename for  use in constructing articles dataframe
temp_filename <- temp$filename
# Create a dataframe by reading in lines of a given textfile
# Add a filename column
articles_df_temp <- read_lines(temp$filepath) %>%
as_tibble() %>%
mutate(filename = temp_filename)
# Bind results to master articles_df
# <<- returns to global environment
articles_df <<- articles_df %>%
bind_rows(articles_df_temp)
}
###
# Create elements needed to run function
###
# Create empty tibble to store results
articles_df <- tibble()
#running once to test
#create_article_text(2)
# Create an array of numbers to loop through, from 1 to the number of rows in our index dataframe
row_values <- 1:nrow(final_index)
###
# Execute function using lapply
# This loops through each row of the dataframe and append results to master file
###
lapply(row_values, create_article_text)
###
# Clean up articles_df and join to index dataframe
###
articles_df <- articles_df %>%
select(filename, sentence=value) %>%
inner_join(final_index)
# write.csv(articles_df, "../exercises/assets/extracted_text/kemi_df2.csv")
write.csv(articles_df, "D:/comp_text_class/project/dataset/nexis uni/article_df.csv")
